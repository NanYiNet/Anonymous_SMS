<?php
/*
 * // +--------------------------------------------+
 * // | Name: Nathan-你的匿名来信
 * // +--------------------------------------------+
 * // | Author: Nathan<www.nanyinet.com>
 * // +--------------------------------------------+
 * // | Contact: QQ：2322796106
 * // +--------------------------------------------+
 * // | Created: PHPStorm
 * // +--------------------------------------------+
 * // | Date: 2022年07月27日
 * // +--------------------------------------------+
 */
namespace app\Nathan\lib;

use app\BaseController;
use think\exception\HttpResponseException;
use think\facade\Config;
use think\facade\Db;

class Nathan extends BaseController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public static function ip() {
        $forwarded = request()->header("x-forwarded-for");
        if ($forwarded) {
            $ip = explode(',',$forwarded)[0];
        } else {
            $ip = request()->ip();
        }
        return $ip;
    }

    public static function getcity($ip) {
        $url = 'http://api.nanyinet.com/api/city/api.php?ip='.$ip;
        $get = file_get_contents($url);
        $json = json_decode($get, true);
        if ($json['code'] != 200){
            return $json['msg'];
        } else {
            return $json['result'];
        }
    }

    public static function randomString($length = 8, $group = null, $split = '-')
    {
        if (!is_null($group) && $group >= 1) {
            $resString = '';

            for ($i = 1; $i <= $group; $i++) {
                $resString .= self::randomString($length) . $split;
            }

            return trim($resString, $split);
        }
        // 密码字符集，可任意添加你需要的字符
        $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        $string = '';
        for ($i = 0; $i < $length; $i++) {
            $string .= $chars[mt_rand(0, strlen($chars) - 1)];
        }
        return $string;
    }

    public static function fun_adm_each(&$array) {
        $res = array();
        $key = key($array);
        if ($key !== null) {
            next($array);
            $res[1] = $res['value'] = $array[$key];
            $res[0] = $res['key'] = $key;
        } else {
            $res = false;
        }
        return $res;
    }

    public static function delete_dir_file($dir_name) {
        $result = false;
        if (is_dir($dir_name)) {
            if ($handle = opendir($dir_name)) {
                while (false !== ($item = readdir($handle))) {
                    if ($item != '.' && $item != '..') {
                        if (is_dir($dir_name . '/' . $item)) {
                            self::delete_dir_file($dir_name . '/' . $item);
                        } else {
                            unlink($dir_name . '/' . $item);
                        }
                    }
                }
                closedir($handle);
                if (rmdir($dir_name)) {
                    $result = true;
                }
            }
        }
        return $result;
    }

    public static function request_post($url = '', $post_data = array()) {
        if (empty($url) || empty($post_data)) {
            return false;
        }
        $o = "";
        foreach ($post_data as $k => $v) {
            $o.= "$k=" . urlencode($v). "&" ;
        }
        $post_data = substr($o,0,-1);
        $postUrl = $url;
        $curlPost = $post_data;
        $ch = curl_init();
        //初始化curl
        curl_setopt($ch, CURLOPT_URL,$postUrl);
        //抓取指定网页
        curl_setopt($ch, CURLOPT_HEADER, 0);
        //设置header
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        //要求结果为字符串且输出到屏幕上
        curl_setopt($ch, CURLOPT_POST, 1);
        //post提交方式
        curl_setopt($ch, CURLOPT_POSTFIELDS, $curlPost);
        $data = curl_exec($ch);
        //运行curl
        curl_close($ch);
        return $data;
    }

    public static function curl_request($url, $post = '', $referer = '', $cookie = '', $returnCookie = 0, $ua = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0') {
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_USERAGENT, $ua);
        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($curl, CURLOPT_AUTOREFERER, 1);
        curl_setopt($curl, CURLOPT_TIMEOUT, 60);
        curl_setopt($curl, CURLOPT_REFERER, $referer);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        $httpheader[] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8";
        $httpheader[] = "Accept-Encoding:gzip, deflate";
        $httpheader[] = "Accept-Language:zh-CN,zh;q=0.9";
        $httpheader[] = "Connection:close";
        curl_setopt($curl, CURLOPT_HTTPHEADER, $httpheader);
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
        if ($post) {
            curl_setopt($curl, CURLOPT_POST, 1);
            curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($post));
        }
        if ($cookie) {
            curl_setopt($curl, CURLOPT_COOKIE, $cookie);
        }
        curl_setopt($curl, CURLOPT_HEADER, $returnCookie);
        curl_setopt($curl, CURLOPT_TIMEOUT, 10);
        curl_setopt($curl, CURLOPT_ENCODING, "gzip");
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        $data = curl_exec($curl);
        if (curl_errno($curl)) {
            return curl_error($curl);
        }
        curl_close($curl);
        if ($returnCookie) {
            list($header, $body) = explode("\r\n\r\n", $data, 2);
            preg_match_all("/Set\-Cookie:([^;]*);/", $header, $matches);
            $info['cookie'] = substr($matches[1][1], 1);
            $info['content'] = $body;
            return $info;
        } else {
            return $data;
        }
    }

    public static function get_qq_contact($qq)
    {
        $url = "http://wpa.qq.com/msgrd?v=3&uin=$qq&site=qq&menu=yes";
        return $url;
    }

    public static function exitContent($data) {
        throw new HttpResponseException($data);
    }

    public static function get_qqphoto($qq)
    {
        $url = "http://q4.qlogo.cn/headimg_dl?dst_uin=$qq&spec=100";
        return $url;
    }

    public static function is_mobile() {
        if ( empty($_SERVER['HTTP_USER_AGENT']) ) {
            $is_mobile = false;
        } elseif ( strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false
            || strpos($_SERVER['HTTP_USER_AGENT'], 'Android') !== false
            || strpos($_SERVER['HTTP_USER_AGENT'], 'Silk/') !== false
            || strpos($_SERVER['HTTP_USER_AGENT'], 'Kindle') !== false
            || strpos($_SERVER['HTTP_USER_AGENT'], 'BlackBerry') !== false
            || strpos($_SERVER['HTTP_USER_AGENT'], 'Opera Mini') !== false
            || strpos($_SERVER['HTTP_USER_AGENT'], 'Opera Mobi') !== false ) {
            $is_mobile = true;
        } else {
            $is_mobile = false;
        }
        return $is_mobile;
    }

    public static function get_date($value){
        if ($value == 1){
            $date = date('Y年n月j日');//2022年0月00日
        }elseif ($value == 2){
            $date = date('Y-m-d H:i:s');//2022-00-00 00:00:00
        }elseif ($value == 3){
            $date = date('Y年m月d日 H时i分s秒'); //2022年00月00日 00时00分00秒
        }elseif ($value == 4){
            $date = date('Y-m-d'); //2022-00-00
        }
        return $date;
    }

    public static function success($msg = '', string $url = null, $data = '', int $wait = 1, array $header = []) {
        if (is_null($url) && isset($_SERVER["HTTP_REFERER"])) {
            $url = request()->isAjax() ? '' : 'javascript:history.back(-1);';
        } elseif ($url) {
            $url = (strpos($url, '://') || 0 === strpos($url, '/')) ? $url : app('route')->buildUrl($url);
        }

        $result = [
            'code' => 1,
            'msg' => $msg,
            'data' => $data,
            'url' => $url,
            'wait' => $wait,
        ];

        $type = self::getResponseType();
        if ($type == 'html') {
            $config = Db::table('config')->where(array('id'=>1))->find();
            $response = view(config('app.dispatch_success_tmpl'), array_merge($result,[
                'webname' => $config['webname'],
                'logo' => $config['logo'],
                'date' => date('Y'),
            ]));
        } else if ($type == 'json') {
            $response = json($result);
        }

        throw new HttpResponseException($response);
    }

    public static function error($msg = '', string $url = null, $data = '', int $wait = 3, array $header = []) {
        if (is_null($url)) {
            $url = request()->isAjax() ? '' : 'javascript:history.back(-1);';
        } elseif ($url) {
            $url = (strpos($url, '://') || 0 === strpos($url, '/')) ? $url : app('route')->buildUrl($url);
        }

        $result = [
            'code' => 0,
            'msg' => $msg,
            'data' => $data,
            'url' => $url,
            'wait' => $wait,
        ];

        $type = self::getResponseType();
        if ($type == 'html') {
            $config = Db::table('config')->where(array('id'=>1))->find();
            $response = view(config('app.dispatch_success_tmpl'), array_merge($result,[
                'webname' => $config['webname'],
                'logo' => $config['logo'],
                'date' => date('Y'),
            ]));
        } else if ($type == 'json') {
            $response = json($result);
        }

        throw new HttpResponseException($response);
    }

    public static function getResponseType() {
        return request()->isJson() || request()->isAjax() ? 'json' : 'html';
    }

    public static function AdminLogin($type){
        switch ($type){
            case 1:
                if (!session('adminname') && !session('adminloginip')) {
                    self::error('请先登录!','index/login',3);
                    return false;
                }else{
                    return true;
                }
                break;
            case 2:
                if (session('adminname') && session('adminloginip')) {
                    self::success('您已登录!','index/index',3);
                    return false;
                }else{
                    return true;
                }
                break;
        }
    }

    public static function UserLogin($type){
        switch ($type){
            case 1:
                if (!session('username') && !session('loginip')) {
                    self::error('请先登录!','index/login',3);
                    return false;
                }else{
                    return true;
                }
                break;
            case 2:
                if (session('username') && session('loginip')) {
                    self::success('您已登录!','index/user',3);
                    return false;
                }else{
                    return true;
                }
                break;
        }
    }

    public static function getFolderList($path) {
        $folderList = [];
        //最终返回的数组
        $keysValue = [];
        //二维数组需要排序的值
        //扫描目录内的所有目录和文件并返回数组
        $data = scandir($path);
        $k = 0;
        foreach ($data as $value) {
            //判断如果不是文件夹则进入下一次循环
            if (!is_dir($path . "/" . $value)) {
                continue;
            }
            if ($value != '.' && $value != '..') {
                $folderList[$k] = array(
                    "name" => $value,
                );
                $keysValue[$k] = $value;
                //记录排序值
                $k++;
            }
        }
        //对二维数组进行排序
        array_multisort($keysValue, SORT_DESC, $folderList);
        return $folderList;
    }

    public static function arr_trinsform_ini(array $a, array $parent = array()){
        $out = ''.PHP_EOL;
        $keysindent=[];
        foreach ($a as $k => $v) {
            if (is_array($v)) {
                $sec = array_merge((array) $parent, (array) $k);
                $out .= '[' . join('.', $sec) . ']' . PHP_EOL;
                $out .= arr_trinsform_ini($v, $sec);
            }
            else {
                $key=explode('_',$k);
                if(count($key)>1 && !in_array($key[0],$keysindent)){
                    $keysindent[]=$key[0];
                    $out .=PHP_EOL.PHP_EOL;
                    $out .="[$key[0]]".PHP_EOL;
                    unset($key[0]);
                    $out .= implode('_',$key)." = $v" . PHP_EOL;
                    //unset($key);
                }elseif (count($key)>1 && in_array($key[0],$keysindent)){
                    unset($key[0]);
                    $out .= implode('_',$key)." = $v" . PHP_EOL;
                }else{
                    $out .= "$k = $v" . PHP_EOL;
                }
            }
        }
        return $out;
    }

    public static function hitokoto()
    {
        $url = 'https://v1.hitokoto.cn/?encode=json'; // 不限定内容类型
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // 跳过证书检查
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); // 从证书中检查SSL加密算法是否存在
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 6);
        $response = curl_exec($ch);
        if (curl_error($ch)) {
            return '获取一言失败~';
        }
        curl_close($ch);
        $array_data = json_decode($response, true);
        $lxtx_content = $array_data['hitokoto'];
        return $lxtx_content;
    }

    public static function check_mail($mail) {
        $checkmail = "/\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/";
        //定义正则表达式
        if (preg_match($checkmail, $mail)) {
            return true;
        } else {
            return false;
        }
    }

    public static function check_mobile($mobile) {
        $checkmobile = "/^1[3456789]\d{9}$/";
        //定义正则表达式
        if (preg_match($checkmobile, $mobile)) {
            return true;
        } else {
            return false;
        }
    }

    public static function passport_key($str, $encrypt_key) {
        $encrypt_key = md5($encrypt_key);
        $ctr = 0;
        $tmp = '';
        for ($i = 0; $i < strlen($str); $i++) {
            $ctr = $ctr == strlen($encrypt_key) ? 0 : $ctr;
            $tmp .= $str[$i] ^ $encrypt_key[$ctr++];
        }
        return $tmp;
    }

    public static function encrypt($str) {
        $encrypt_key = md5((string)mt_rand(0, 32000));
        $ctr = 0;
        $tmp = '';
        for ($i = 0; $i < strlen($str); $i++) {
            $ctr = $ctr == strlen($encrypt_key) ? 0 : $ctr;
            $tmp .= $encrypt_key[$ctr] . ($str[$i] ^ $encrypt_key[$ctr++]);
        }
        return base64_encode(self::passport_key($tmp,'Nathan_2322796106'));
    }

    public static function decrypt($str) {
        $str = self::passport_key(base64_decode($str),'Nathan_2322796106');
        $tmp = '';
        for ($i = 0; $i < strlen($str); $i++) {
            $md5 = $str[$i];
            if (isset($str[++$i])) {
                $tmp .= $str[$i] ^ $md5;
            }
        }
        return $tmp;
    }
}