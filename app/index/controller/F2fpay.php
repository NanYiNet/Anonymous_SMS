<?php
/*
 * // +--------------------------------------------+
 * // | Name: Nathan-你的匿名来信
 * // +--------------------------------------------+
 * // | Author: Nathan<www.nanyinet.com>
 * // +--------------------------------------------+
 * // | Contact: QQ：2322796106
 * // +--------------------------------------------+
 * // | Created: PHPStorm
 * // +--------------------------------------------+
 * // | Date: 2022年07月27日
 * // +--------------------------------------------+
 */
declare (strict_types = 1);
namespace app\index\controller;

use app\BaseController;
use app\Nathan\lib\Nathan;
use f2fpay\model\builder\AlipayTradePrecreateContentBuilder;
use f2fpay\model\builder\AlipayTradeQueryContentBuilder;
use f2fpay\model\builder\AopClient;
use f2fpay\service\AlipayTradeService;
use think\facade\Db;
use think\facade\Config;
use think\facade\Request;
use think\facade\View;

/**
 * 当面付
 */
class F2fpay extends BaseController
{

    public function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub
        $web = Db::table('config')->where('id',1)->find();
        if ($web['status'] != 1){
            Nathan::exitContent(View(Config('app.maintain_tmpl'),[
                'web' => $web,
                'QQ_Contact' => Nathan::get_qq_contact($web['webqq']),
                'date' => date('Y')
            ]));
        }
        $ip = Db::table('ip')->where([
            'status' => 1,
            'ip' => Nathan::ip()
        ])->find();
        if ($ip){
            die('<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
                    <style type="text/css">*{ padding: 0; margin: 0; } div{ padding: 4px 48px;} a{color:#2E5CD5;cursor: pointer;text-decoration: none} a:hover{text-decoration:underline; } body{ background: #fff; font-family: "Century Gothic","Microsoft yahei"; color: #333;font-size:18px;} h1{ font-size: 100px; font-weight: normal; margin-bottom: 12px; } p{ line-height: 1.6em; font-size: 42px }</style>
                    <div style="padding: 24px 48px;"> <h1>:) </h1>
                    <h3>'.$web['ip_tips'].'</h3>');
        }
        $this->alipay_config = array_merge(Config::get('alipay'),$web);
        $this->alipay_config['notify_url'] = Request::domain() . url('index/f2fpay/notify');
        if (empty($this->alipay_config['alipay_public_key'])) {
            Nathan::error('支付宝公钥没有配置','index/pay',3);
        }
        if (empty($this->alipay_config['alipay'] == 'f2f')) {
            Nathan::error('当面付未开启','index/pay',3);
        }
        if (empty($this->alipay_config['alipay_private_key'])) {
            Nathan::error('商户私钥没有配置','index/pay',3);
        }
        if (empty($this->alipay_config['alipay_app_id'])) {
            Nathan::error('应用ID没有配置','index/pay',3);
        }
    }

    public function query() {
        Nathan::UserLogin(1);
        if (input('post.no')) {
            $out_trade_no = input('post.no');
            $queryContentBuilder = new AlipayTradeQueryContentBuilder();
            $queryContentBuilder->setOutTradeNo($out_trade_no);

            $queryResponse = new AlipayTradeService($this->alipay_config);
            $queryResult = $queryResponse->queryTradeResult($queryContentBuilder);
            $res['status'] = $queryResult->getTradeStatus();
            $res['buyer'] = isset($queryResult->getResponse()->buyer_logon_id) ? $queryResult->getResponse()->buyer_logon_id : '';
            $res['amount'] = $queryResult->getResponse()->buyer_pay_amount;
                
            if ($res['status'] == 'SUCCESS') {
                return $this->paySuccess($out_trade_no);
            }
            exit(json_encode($res));
        } else {
            Nathan::error('非法请求');
        }
    }

    // 等待支付页面
    public function pay() {
        Nathan::UserLogin(1);
        if (empty(input('post.body')) || empty(input('post.no')) || empty(input('post.money')) || empty(input('post.qr'))) {
            Nathan::error('非法请求');
        } else {
            View::assign([
                'body'=>  input('post.body'),
                'out_trade_no'=>  input('post.no'),
                'money'=> input('post.money'),
                'qr'=> input('post.qr'),
                'web'=>  $this->alipay_config,
            ]);
            return view('index/f2fpay');
        }
    }

    /**
     * 支付入口
     * @Author   Nathan
     * @DateTime 2020-12-12
     * @param    [type]     $out_trade_no 订单号
     * @param    [type]     $money        支付金额
     * @param    [type]     $body         标题（备注）小于20字
     * @return   [type]                   [description]
     */
    public function toPay($out_trade_no, $money) {
        Nathan::UserLogin(1);
        $body = $this->alipay_config['webname'].'在线购买';

        $totalAmount = trim($money);
        //支付宝金额只支持两位小数
        if (!is_numeric($totalAmount) || $totalAmount == 0) {
            Nathan::error('订单金额不合法');
        }


        // 创建请求builder，设置请求参数
        $qrPayRequestBuilder = new AlipayTradePrecreateContentBuilder();
        $qrPayRequestBuilder->setOutTradeNo($out_trade_no);
        $qrPayRequestBuilder->setTotalAmount($totalAmount);
        $qrPayRequestBuilder->setSubject($body);
        #print_r(get_class_methods($qrPayRequestBuilder));
        // 调用qrPay方法获取当面付应答

        // var_dump( $alipay_config);exit;
        $qrPay = new AlipayTradeService($this->alipay_config);
        $qrPayResult = $qrPay->qrPay($qrPayRequestBuilder);

        if ($qrPayResult->getTradeStatus() === "SUCCESS") {
            $qr = $qrPayResult->getResponse()->qr_code;
            //SUCCESS 是官方SDK给的结果。如果想看详细的介绍，去找SDK
        } else {
            Nathan::error('生成订单失败,错误原因：' . $qrPayResult->getTradeStatus());
        }

        $form['body'] = $body;
        $form['no'] = $out_trade_no;
        $form['money'] = $totalAmount;
        $form['qr'] = $qr;
        // var_dump($form);exit;
        $sHtml = "<form id='alipaysubmit' name='alipaysubmit' action='" . url('index/F2fpay/pay') . "' method='POST'>";
        // var_dump($sHtml);exit;
        foreach ($form as $key => $value) {
            if ($value != null) {
                //$value = $this->characet($value, $this->postCharset);
                $value = str_replace("'", "&apos;", $value);
                //$value = str_replace("\"","&quot;",$value);
                $sHtml .= "<input type='hidden' name='" . $key . "' value='" . $value . "'/>";
            }
        }

        //submit按钮控件请不要含有name属性
        $sHtml = $sHtml . "<input type='submit' value='ok' style='display:none;''></form>";

        $sHtml = $sHtml . "<script>document.forms['alipaysubmit'].submit();</script>";
        exit($sHtml);
    }

    // 异步回调
    public function notify() {
        if ($this->request->isPost()) {
            $aop = new AopClient;
            $aop->alipayrsaPublicKey = $this->alipay_config['alipay_public_key'];
            $flag = $aop->rsaCheckV1($_POST, null, "RSA2");
            if ($flag) {
                echo 'success';
                //接口必须返回success 不然阿里会一直发送校验验证。
                //异步SIGN验证成功， 可以进行下一步动作。例如验证订单金额 然后完成订单。之类的。。
                //需要验证的就是 订单号 与 订单金额是否一致，验证成功 就可以对数据库中的订单进行操作了。
                //TRADE_SUCCESS 对于当面付来说，已经到账了。详情可以看这里 https://www.cnblogs.com/tdalcn/p/5956690.html
                if ($_POST['trade_status'] === "TRADE_SUCCESS") {
                    //订单处理模板
                    $no = $_POST['out_trade_no'];
                    $mount = $_POST['total_amount'];
                    $trade_no = $_POST['trade_no'];
                    $notify_time = $_POST['notify_time'];
                    $buyer_logon_id = $_POST['buyer_logon_id'];
                    return $this->paySuccess($no, $trade_no);
                }
            } else {
                echo 'error';
            }
        } else {
            exit();
        }
    }



    /**
     * 获取订单信息
     * @Author   Nathan
     * @DateTime 2020-12-12
     * @param    [type]     $out_trade_no [description]
     * @return   [type]                   [description]
     */
    private function get_payinfo($out_trade_no) {
        if ($payinfo = Db::table('pay')->where('out_trade_no', $out_trade_no)->find()) {
            return $payinfo;
        } else {
            return false;
        }
    }

    /**
     * 支付成功
     * @Author   Nathan
     * @DateTime 2020-12-12
     * @return   [type]        [description]
     */
    private function paySuccess($out_trade_no, $trade_no = '') {


        // 查找订单
        $payInfo = $this->get_payinfo($out_trade_no);
        // 没有找到该订单
        if (!$payInfo) {
            return 'null';
        }

        // 支付成功
        if ($payInfo['status'] == 1) {
            return 'success';
        }
        // 写入数据库
        $user = Db::table('user')->where(array('username' => $payInfo['username']))->find();
        $update =  Db::table('user')->where(array('username' => $payInfo['username']))->update(['money'=> $user['money'] + $payInfo['money']]);
        $up = Db::table('pay')->where('out_trade_no', $out_trade_no)->update(['status' => 1]);
        if (!$update) {
            return 'error';
        }
        if (!$up) {
            return 'error';
        }
        return 'success';
    }
}